---
title: "Download Data"
engine: jupyter
jupyter: myproj
---

Download and save ERA5 climate reanalysis datasets using the Climate Data Store CDSAPI:  <https://cds.climate.copernicus.eu/how-to-api>.

## ***Climate Periods***
```{python}
#| label: climate periods
# Climatological Reference Period
crp = "CRP"
crp_beg = 1961
crp_end = 1990
# Recent Climate Period
rcp = "RCP"
rcp_beg = 2015
rcp_end = 2024
```

## ***Packages***
```{python}
#| label: packages
import cdsapi
import os
from pathlib import Path
from datetime import datetime
import pandas as pd
import time

```

## ***Directories***
```{python}
#| label: directories
dir_wr = "_data/01_downloaded_data/"
```

## ***Functions***

Function to download ERA5 temperature and precipitation data.

```{python}
#| label: fn_download_climate_data

def fn_download_climate_data(
    pth: str, 
    var: str,
    beg: int,
    end: int,
    log_df: pd.DataFrame):

    start_time = datetime.now()

    out = Path(pth)
    yrs = list(range(beg, end+1))
    mths = list(range(1, 13))

    if var == "t":
        variable_name = "2m_temperature"
    elif var == "p":
        variable_name = "total_precipitation"

    c = cdsapi.Client()  # will read ~/.cdsapirc

    c.retrieve(
        "reanalysis-era5-single-levels-monthly-means",
        {
            "product_type": "monthly_averaged_reanalysis",
            "variable": variable_name,
            "year": yrs,
            "month": mths,
            "time": "00:00",
            "format": "netcdf"
        },
        str(out),
    )

    file_name = os.path.basename(pth)
    end_time = datetime.now()  
    elapsed_time = end_time - start_time  
    total_seconds = int(elapsed_time.total_seconds())
    mm, ss = divmod(total_seconds, 60)
    elapsed_str = f"{mm:02d}:{ss:02d}"


    # Append new row to log file
    new_row = {
        "File Name": file_name,
        "Time (mm:ss)": elapsed_str
    }
    log_df = pd.concat([log_df, pd.DataFrame([new_row])], ignore_index=True)

    return(log_df)

```

Function to download ERA5 land sea mask.

```{python}
#| label: fn_download_land_sea_mask

def fn_download_land_sea_mask(
    pth: str,
    log_df: pd.DataFrame):

    start_time = datetime.now()

    out = Path(pth)
    c = cdsapi.Client() 
    c.retrieve(
        "reanalysis-era5-single-levels",
        {
            "product_type": "reanalysis",
            "variable": "land_sea_mask",
            "year": "2000",
            "month": "01",
            "day": "01",
            "time": "00:00",
            "area": "90/-179.75/-90/180", # N/W/S/E (global)
            "grid": "0.25/0.25", # ERA5 native grid spacing
            "format": "netcdf"
        },
        str(out),
    )
    
    file_name = os.path.basename(pth)
    end_time = datetime.now()  
    elapsed_time = end_time - start_time  
    total_seconds = int(elapsed_time.total_seconds())
    mm, ss = divmod(total_seconds, 60)
    elapsed_str = f"{mm:02d}:{ss:02d}"

    # Append new row to log file
    new_row = {
        "File Name": file_name,
        "Time (mm:ss)": elapsed_str
    }
    log_df = pd.concat([log_df, pd.DataFrame([new_row])], ignore_index=True)

    return(log_df)
```

## ***Download Data***

```{python}
#| label: download_data
 
log_df = pd.DataFrame(columns=["File Name", "Time (mm:ss)"])

pth = dir_wr + "crp_downloaded_t.nc"
log_df = fn_download_climate_data(pth, "t", crp_beg, crp_end, log_df)
pth = dir_wr + "crp_downloaded_p.nc" 
log_df = fn_download_climate_data(pth, "p", crp_beg, crp_end, log_df)
pth = dir_wr + "rcp_downloaded_t.nc" 
log_df = fn_download_climate_data(pth, "t", rcp_beg, rcp_end, log_df)
pth = dir_wr + "rcp_downloaded_p.nc"
log_df = fn_download_climate_data(pth, "p", rcp_beg, rcp_end, log_df)

pth = dir_wr + "land_sea_mask.nc"
log_df = fn_download_land_sea_mask(pth, log_df)

```

## ***Download Summary***

```{python}
#| label: build_summary
 
cp_cv_fn_df = pd.DataFrame(columns=["Climate Period", "Climate Variable", "File Name"])

def add_record(df, cp, beg, end, cv):

    if cv == "t":
        cv_name = "Temperature"
    else:
        cv_name = "Precipitation"

    new_row = {
        "Climate Period": cp + "_"  + str(beg) + "_" + str(end),
        "Climate Variable": cv_name,
        "File Name": cp.lower() + "_downloaded_" + cv + ".nc"
    }
    df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)

    return (df)

cp_cv_fn_df  = add_record(cp_cv_fn_df, crp, crp_beg, crp_end, "t")
cp_cv_fn_df  = add_record(cp_cv_fn_df, crp, crp_beg, crp_end, "p")
cp_cv_fn_df  = add_record(cp_cv_fn_df, rcp, rcp_beg, rcp_end, "t")
cp_cv_fn_df  = add_record(cp_cv_fn_df, rcp, rcp_beg, rcp_end, "p")

new_row = {
    "Climate Period": "All Periods",
    "Climate Variable": "NA",
    "File Name": "land_sea_mask.nc"
}
cp_cv_fn_df = pd.concat([cp_cv_fn_df, pd.DataFrame([new_row])], ignore_index=True)

```


```{python}
#| label: directory_contents

def fn_directory_contents_df(dir):
    data =  []
    for fname in os.listdir(dir):
        # skip hidden files (starting with ".")
        if fname.startswith("."):
            continue
        fpath = os.path.join(dir, fname)
        if os.path.isfile(fpath):
            size_mb = os.path.getsize(fpath) / (1024 * 1024)  # bytes â†’ MB
            mtime = os.path.getmtime(fpath)
            #mod_date = datetime.fromtimestamp(mtime).strftime("%Y-%m-%d")
            mod_time = datetime.fromtimestamp(mtime).strftime("%Y-%m-%d %H:%M:%S")
            data.append({
                "File Name": fname,
                "Downloaded At": mod_time,
                "Size (MB)": round(size_mb, 2)
            })
    df = pd.DataFrame(data)

    # Format Size (MB) with two decimals as string
    df["Size (MB)"] = df["Size (MB)"].map("{:.2f}".format)

    # Sort in order downloaded, then drop the modified time column
    df = df.sort_values(by="Downloaded At", ascending=True)
    #df = df.drop(columns=["Last Modified Time"])

    return df

dir_df = fn_directory_contents_df(dir_wr)
```

```{python}
#| label: merge_dfs

merged_df = cp_cv_fn_df.merge(dir_df, on="File Name", how="left") \
                       .merge(log_df, on="File Name", how="left") 

# Reorder so "Climate Period" is first
cols = ["Climate Period"] + [c for c in merged_df.columns if c != "Climate Period"]
merged_df = merged_df[cols]

```

```{python}
#| label: summary_df

summary_df = (
    merged_df.style
        .hide(axis="index")   # removes row labels (index)
        .set_table_styles([
            # Climate Period
            {"selector": ".col0, th.col0",
            "props": [("min-width", "120px"), ("text-align", "left")]},

            # Climate Variable 
            {"selector": ".col1, th.col1",
            "props": [("min-width", "140px"), ("text-align", "left")]},

            # File Name
            {"selector": ".col2, th.col2",
            "props": [("min-width", "180px"), ("text-align", "left")]},

            # Downloaded 
            {"selector": ".col3, th.col3",
            "props": [("min-width", "170px"), ("text-align", "left")]},

            # Size (MB) 
            {"selector": ".col4, th.col4",
            "props": [("min-width", "80px"), ("text-align", "right")]},

            # Time  (mm:ss)
            {"selector": ".col5, th.col5",
            "props": [("min-width", "100px"), ("text-align", "right")]}
        ])
)

summary_df
```